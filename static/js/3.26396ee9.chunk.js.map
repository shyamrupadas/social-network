{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","onBlur","updateStatus","autoFocus","ProfileDataReduxForm","reduxForm","form","profile","handleSubmit","error","onSubmit","createField","Input","type","Textarea","keys","contacts","map","key","className","s","contact","style","formSummaryError","ProfileData","isOwner","goToEditMode","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","contactTitle","contactValue","onClick","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","descriptionBlock","src","photos","large","userPhoto","mainPhoto","target","files","initialValues","formData","then","Post","c","item","alt","message","likesCount","MyPosts","React","memo","postsElements","profilePage","posts","p","id","postsBlock","MyPostReduxForm","values","addPost","newPostText","maxLength10","maxLengthCreator","Field","component","name","placeholder","validate","required","MyPostsContainer","connect","state","dispatch","actions","addPostCreator","Profile","ProfileContainer","userId","this","match","params","authorizerUserId","history","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.26396ee9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3lTQK\",\"mainPhoto\":\"ProfileInfo_mainPhoto__c2jC1\",\"contact\":\"ProfileInfo_contact__HI_op\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__RkeIZ\",\"posts\":\"MyPosts_posts__VqHTS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__F-bai\"};","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React, { ChangeEvent, useEffect, useState } from 'react';\r\n\r\ntype PropsType = {\r\n  status: string\r\n  updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks: React.FC<PropsType> = (props) => {\r\n\r\n  let [editMode, setEditMode] = useState(false);\r\n  let [status, setStatus] = useState(props.status);\r\n\r\n  useEffect(() => {\r\n    setStatus(props.status);\r\n  }, [props.status]);\r\n\r\n  const activateEditMode = () => {\r\n    setEditMode(true);\r\n  }\r\n\r\n  const deactivateEditMode = () => {\r\n    setEditMode(false);\r\n    props.updateStatus(status);\r\n  }\r\n\r\n  const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setStatus(e.currentTarget.value);\r\n  }\r\n\r\n     return (\r\n      <div>\r\n        { !editMode &&\r\n          <div>\r\n            <span onDoubleClick={activateEditMode}>{props.status || 'Напишите что-нибудь'}</span>\r\n          </div>\r\n        }\r\n        { editMode &&\r\n          <div>\r\n            <input onChange={onStatusChange} onBlur={deactivateEditMode} autoFocus={true}\r\n                   value={status}/>\r\n          </div>\r\n        }\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import { createField, Input, Textarea } from \"../../common/FormsContrls/FormsControls\";\r\nimport { InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport style from \"../../common/FormsContrls/FormsControls.module.css\";\r\nimport React from 'react';\r\n\r\ntype  ProfileDataFormOwnProps = {\r\n  profile: any\r\n}\r\n\r\nexport type ProfileDataFormValuesType = {\r\n  fullName: string\r\n  lookingForAJob: boolean\r\n  lookingForAJobDescription: string\r\n  aboutMe: string\r\n  contacts: any\r\n}\r\n\r\ntype ProfileDataFormValuesTypeKeys = keyof ProfileDataFormValuesType;\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileDataFormValuesType, ProfileDataFormOwnProps> & ProfileDataFormOwnProps> = ({ profile, handleSubmit, error }) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div>\r\n        <strong>Имя</strong> {createField<ProfileDataFormValuesTypeKeys>('Имя', 'fullName', [], Input)}\r\n      </div>\r\n      <div>\r\n        Ищу работу: {createField<ProfileDataFormValuesTypeKeys>('', 'lookingForAJob', [], Input, { type: 'checkbox' })}\r\n      </div>\r\n      <div>\r\n        Мои профессионалные навыки:\r\n        {createField<ProfileDataFormValuesTypeKeys>('Мои профессионалные навыки', 'lookingForAJobDescription', [], Textarea)}\r\n      </div>\r\n      <div>\r\n        Обо мне: {createField<ProfileDataFormValuesTypeKeys>('Обо мне', 'aboutMe', [], Textarea)}\r\n      </div>\r\n      <div>\r\n        <h3>Контакты</h3>\r\n        {Object.keys(profile.contacts).map(key => {\r\n          return <div key={key} className={s.contact}>{key}: {createField(key, 'contacts.' + key, [], Input)}</div>\r\n        })}\r\n      </div>\r\n      {error && <span className={style.formSummaryError}>{error}</span>}\r\n      <div>\r\n        <button>Сохранить</button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst ProfileDataReduxForm = reduxForm<ProfileDataFormValuesType, ProfileDataFormOwnProps>({ form: 'edit-profile' })(ProfileDataForm)\r\n\r\nexport default ProfileDataReduxForm;","import s from \"./ProfileInfo.module.css\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/images/user.jpg\";\r\nimport {useState} from \"react\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e) => {\r\n        if (e.target.files.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData) => {\r\n        saveProfile(formData).then(\r\n            () => {\r\n                setEditMode(false);\r\n            }\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <div><img src={profile.photos.large || userPhoto} className={s.mainPhoto}/></div>\r\n                <div>\r\n                    {isOwner && <input type=\"file\" onChange={onMainPhotoSelected}/>}\r\n                </div>\r\n                <div><p>Статус:<ProfileStatusWithHooks status={status} updateStatus={updateStatus}/></p></div>\r\n                {editMode\r\n                    ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\r\n                    : <ProfileData profile={profile} isOwner={isOwner} goToEditMode={() => setEditMode(true)}/>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ProfileData = ({profile, isOwner, goToEditMode}) => {\r\n    return (\r\n        <div>\r\n            <div>\r\n                <h3>{profile.fullName}</h3>\r\n            </div>\r\n            <div>\r\n                <p>Обо мне: {profile.aboutMe}</p>\r\n            </div>\r\n            <div>\r\n                <p>Ищу работу: {profile.lookingForAJob ? 'Да' : 'Нет'}</p>\r\n            </div>\r\n            {profile.lookingForAJob &&\r\n            <div>\r\n                <p>Мои профессионалные\r\n                    навыки: {profile.lookingForAJobDescription && profile.lookingForAJobDescription}</p>\r\n            </div>}\r\n            <div>\r\n                <h3>Контакты</h3>\r\n                {Object.keys(profile.contacts).map(key => {\r\n                    return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\r\n                })}\r\n            </div>\r\n            {isOwner && <div><button onClick={goToEditMode}>Редактировать</button></div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Contact = ({contactTitle, contactValue}) => {\r\n    return <div className={s.contact}>{contactValue && <div>{contactTitle}: {contactValue}</div>}</div>\r\n}\r\n\r\nexport default ProfileInfo;","import c from \"./Post.module.css\";\r\n\r\nconst Post = (props) => {\r\n  return (\r\n    <div className={c.item}>\r\n      <img src=\"https://hypeava.ru/uploads/posts/2018-05/1527186681_1.jpg\" alt=\"Ava\"/>\r\n      {props.message}\r\n      <div>\r\n        <span>{props.likesCount} like</span>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Post;","import React from \"react\";\r\nimport s from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsContrls/FormsControls\";\r\n\r\nconst MyPosts = React.memo(props => {\r\n  const postsElements = props.profilePage.posts.map(p => <Post message={p.message} key={p.id}\r\n                                                               likesCount={p.likesCount}/>);\r\n\r\n  const addNewPost = (values) => {\r\n    props.addPost(values.newPostText)\r\n  }\r\n\r\n  return (\r\n    <div className={s.postsBlock}>\r\n      <h3>My posts</h3>\r\n      <MyPostReduxForm onSubmit={addNewPost}/>\r\n      <div className={s.posts}>\r\n        {postsElements}\r\n      </div>\r\n    </div>\r\n  )\r\n});\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst MyPostForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        <Field component={Textarea} name='newPostText' placeholder='Как у вас дела?'\r\n        validate={[required, maxLength10]} />\r\n      </div>\r\n      <div>\r\n        <button>Добавить запись</button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst MyPostReduxForm = reduxForm({form: 'ProfileAddNewPostForm'})(MyPostForm)\r\n\r\nexport default MyPosts;","import {actions} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    profilePage: state.profilePage\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addPost: (newPostText) => {\r\n      dispatch(actions.addPostCreator(newPostText));\r\n    }\r\n  }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport React from \"react\";\r\n\r\nconst Profile = (props) => {\r\n\r\n  return (\r\n    <div>\r\n      <ProfileInfo savePhoto={props.savePhoto}\r\n                   isOwner={props.isOwner}\r\n                   profile={props.profile}\r\n                   status={props.status}\r\n                   saveProfile={props.saveProfile}\r\n                   updateStatus={props.updateStatus}/>\r\n      <MyPostsContainer />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {withRouter} from \"react-router-dom\"\r\nimport {compose} from \"redux\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizerUserId;\r\n            if (!userId) {\r\n                this.props.history.push('/login');\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     savePhoto={this.props.savePhoto} />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizerUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter\r\n)(ProfileContainer);"],"sourceRoot":""}