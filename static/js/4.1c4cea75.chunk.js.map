{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Messages/Message.jsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.js","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","props","path","id","className","s","dialog","active","to","name","Message","message","msg","maxLength50","maxLengthCreator","DialogsReduxForm","reduxForm","form","onSubmit","handleSubmit","createField","required","Textarea","Dialogs","dialogsElements","dialogs","map","d","messagesElements","messages","m","dialogsItems","mapStateToPropsForRedirect","state","isAuth","auth","compose","connect","dialogsPage","sendMessage","actions","Component","RedirectComponent","this","React"],"mappings":"uGACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,4B,sFCa/HC,EAXI,SAACC,GAClB,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OACE,qBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,OAAnC,SACE,cAAC,IAAD,CAASC,GAAIN,EAAb,SAAoBD,EAAMQ,U,gBCEjBC,EAPC,SAACT,GAEf,OACE,qBAAKG,UAAWC,IAAEM,QAAlB,SAA4BV,EAAMW,O,yBCoDhCC,EAAcC,YAAiB,IAkB/BC,EAAmBC,YAAU,CAAEC,KAAM,WAAlBD,EAZ2B,SAACf,GACnD,OACE,uBAAMiB,SAAUjB,EAAMkB,aAAtB,UACE,8BAAMC,YAAY,2GAChB,iBAAkB,CAACC,IAAUR,GAAcS,OAC7C,8BACE,qGAQOC,EA5CC,SAACtB,GACf,IAAMuB,EAAkBvB,EAAMwB,QAAQC,KAAI,SAACC,GAAD,OACxC,cAAC,EAAD,CAAYlB,KAAMkB,EAAElB,KAAiBN,GAAIwB,EAAExB,IAAZwB,EAAExB,OAC7ByB,EAAmB3B,EAAM4B,SAASH,KAAI,SAACI,GAAD,OAC1C,cAAC,EAAD,CAASlB,IAAKkB,EAAEnB,SAAcmB,EAAE3B,OAKlC,OAEE,sBAAKC,UAAWC,IAAEoB,QAAlB,UACE,qBAAKrB,UAAWC,IAAE0B,aAAlB,SACGP,IAEH,sBAAKpB,UAAWC,IAAEwB,SAAlB,UACGD,EACD,cAACb,EAAD,W,uDC/CFiB,EAA6B,SAACC,GAAD,MAAY,CAC7CC,OAAQD,EAAME,KAAKD,S,QCSNE,4BACbC,aARsB,SAACJ,GACvB,MAAO,CACLJ,SAAUI,EAAMK,YAAYT,SAC5BJ,QAASQ,EAAMK,YAAYb,WAKJ,CAACc,YAAaC,IAAQD,eDPjB,SAACE,GAAe,IAExCC,EAFuC,4JAG3C,WACE,OAAKC,KAAK1C,MAAMiC,OACT,cAACO,EAAD,eAAeE,KAAK1C,QADI,cAAC,IAAD,CAAUO,GAAG,eAJH,GAEboC,IAAMH,WAStC,OAFuCJ,YAAQL,EAARK,CAAoCK,KCH9DN,CAGbb","file":"static/js/4.1c4cea75.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1Kj-c\",\"dialogsItems\":\"Dialogs_dialogsItems__zU1si\",\"active\":\"Dialogs_active__1g7dn\",\"messages\":\"Dialogs_messages__1pw2t\"};","import s from './../Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n  let path = '/dialogs/' + props.id;\r\n\r\n  return (\r\n    <div className={s.dialog + ' ' + s.active}>\r\n      <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default DialogItem;","import s from './../Dialogs.module.css'\r\nimport React from \"react\";\r\n\r\nconst Message = (props) => {\r\n\r\n  return (\r\n    <div className={s.message}>{props.msg}</div>\r\n  )\r\n}\r\n\r\nexport default Message;","import s from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Messages/Message\";\r\nimport React from \"react\";\r\nimport { Field, reduxForm, SubmitHandler } from \"redux-form\";\r\nimport { createField, Input, Textarea } from \"../common/FormsContrls/FormsControls\";\r\nimport { maxLengthCreator, required } from \"../../utils/validators/validators\";\r\nimport { InitialStateType } from '../../redux/dialogs-reducer';\r\n\r\ntype DialogType = {\r\n  id: number\r\n  name: string\r\n};\r\ntype MessageType = {\r\n  id: number\r\n  message: string\r\n};\r\ntype PropsType = {\r\n  dialogs: Array<DialogType>\r\n  messages: Array<MessageType>\r\n  sendMessage: (newMessageBody: string) => void\r\n};\r\n\r\n// Димыч предложил так, но мне что-то не нравится\r\ntype OwnPropsType = {\r\n  dialogsPage: InitialStateType\r\n};\r\n\r\ntype NewMessageFormType = {\r\n  newMessageBody: string\r\n}\r\n\r\ntype NewMessageTypeKeys = Extract<keyof PropsType, string>;\r\n\r\nconst Dialogs = (props: any) => {\r\n  const dialogsElements = props.dialogs.map((d: { name: string; id: number; }) =>\r\n    <DialogItem name={d.name} key={d.id} id={d.id}/>);\r\n  const messagesElements = props.messages.map((m: { message: string; id: number; }) =>\r\n    <Message msg={m.message} key={m.id}/>);\r\n\r\n  const addNewMessage = (values: {newMessageBody: any}) => {\r\n    props.sendMessage(values.newMessageBody)\r\n  }\r\n  return (\r\n\r\n    <div className={s.dialogs}>\r\n      <div className={s.dialogsItems}>\r\n        {dialogsElements}\r\n      </div>\r\n      <div className={s.messages}>\r\n        {messagesElements}\r\n        <DialogsReduxForm />\r\n        {/*<DialogsReduxForm onSubmit={addNewMessage}/>*/}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\ntype DialogsFormPropsType = {\r\n  handleSubmit: SubmitHandler<{}, {}, string>\r\n}\r\n\r\nconst DialogsForm: React.FC<DialogsFormPropsType> = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>{createField('Напишите сообщение!',\r\n        'newMessageBody', [required, maxLength50], Textarea)}</div>\r\n      <div>\r\n        <button>Отправить!</button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst DialogsReduxForm = reduxForm({ form: 'dialogs' })(DialogsForm)\r\n\r\nexport default Dialogs;","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst mapStateToPropsForRedirect = (state) => ({\r\n  isAuth: state.auth.isAuth\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n  class RedirectComponent extends React.Component {\r\n    render () {\r\n      if (!this.props.isAuth) return <Redirect to='/login'/>;\r\n      return <Component {...this.props} />\r\n    }\r\n  }\r\n\r\n  const ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n  return ConnectedAuthRedirectComponent;\r\n}","import { actions } from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport { connect } from \"react-redux\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\nimport { AppStateType } from '../../redux/redux-store';\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n  return {\r\n    messages: state.dialogsPage.messages,\r\n    dialogs: state.dialogsPage.dialogs\r\n  }\r\n};\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, {sendMessage: actions.sendMessage}),\r\n  withAuthRedirect\r\n)(Dialogs);"],"sourceRoot":""}